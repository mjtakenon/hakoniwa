steps:
  - id: 'pull-image-frontend-build-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_IMAGE_FRONTEND_BUILD_STAGE}:latest || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_IMAGE_APP_DEPLOY_STAGE}:latest || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-composer'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_COMPOSER_IMAGE_NAME} || exit 0' ]
    waitFor: [ '-' ]
  - id: 'pull-image-node'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker pull ${_NODE_IMAGE_NAME} || exit 0' ]
    waitFor: [ '-' ]

  - id: 'build-image-frontend-build-stage'
    name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-f', './infra/cloudbuild/Dockerfile',
      '--target', 'frontend_build_stage',
      '--cache-from', '${_IMAGE_FRONTEND_BUILD_STAGE}',
      '-t', '${_IMAGE_FRONTEND_BUILD_STAGE}',
      '.'
    ]
    waitFor: [ 'pull-image-frontend-build-stage', 'pull-image-node' ]

  - id: 'build-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-f', './infra/cloudbuild/Dockerfile',
      '--target', 'deploy_stage',
      '--cache-from', '${_IMAGE_FRONTEND_BUILD_STAGE}',
      '--cache-from', '${_IMAGE_APP_DEPLOY_STAGE}',
      '-t', '${_IMAGE_APP_DEPLOY_STAGE}',
      '.'
    ]
    waitFor: [ 'pull-image-app-deploy-stage', 'pull-image-composer', 'build-image-frontend-build-stage' ]

  - id: 'push-image-frontend-build-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker push ${_IMAGE_FRONTEND_BUILD_STAGE} || exit 0' ]
    waitFor: [ 'build-image-frontend-build-stage' ]

  - id: 'push-image-app-deploy-stage'
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [ '-c', 'docker push ${_IMAGE_APP_DEPLOY_STAGE} || exit 0' ]
    waitFor: [ 'build-image-app-deploy-stage' ]

  - id: 'migrate'
    name: 'gcr.io/google-appengine/exec-wrapper'
    args: [
      '-i', '${_IMAGE_APP_DEPLOY_STAGE}'
      '-e', 'APP_ENV=${_APP_ENV}'
      '-e', 'DB_PASSWORD=${DB_PASSWORD}'
      '--', 'php', 'artisan', 'migrate'
    ]
    secretEnv: ['DB_PASSWORD']
    waitFor: [ 'push-image-app-deploy-stage' ]

  - id: 'deploy-image'
    name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', '${_CLOUD_RUN_INSTANCE_NAME}',
      '--image', '${_IMAGE_APP_DEPLOY_STAGE}',
      '--region', 'asia-northeast1'
    ]
    waitFor: [ 'push-image-app-deploy-stage' ] #, 'migrate'

images:
  - '${_IMAGE_FRONTEND_BUILD_STAGE}:latest'
  - '${_IMAGE_APP_DEPLOY_STAGE}:latest'
substitutions:
  _NODE_IMAGE_NAME: 'node:18.15.0-bullseye'
  _COMPOSER_IMAGE_NAME: 'composer:2.5.5'
  _IMAGE_FRONTEND_BUILD_STAGE: 'asia-northeast1-docker.pkg.dev/hakoniwa-dev/build-images/develop/cache/frontend_build_stage'
  _IMAGE_APP_DEPLOY_STAGE: 'asia-northeast1-docker.pkg.dev/hakoniwa-dev/build-images/develop/app_deploy_stage'
  _CLOUD_RUN_INSTANCE_NAME: 'hakoniwa-develop'
availableSecrets:
  secretManager:
    - versionName: projects/171731211938/secrets/hakoniwa-develop-db-pass
      env: 'DB_PASSWORD'
timeout:
  1800s